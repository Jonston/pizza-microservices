<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="originalContent" value="FROM php:8.4-fpm&#10;&#10;# Получаем UID/GID из аргументов сборки&#10;ARG USER_ID=1000&#10;ARG GROUP_ID=1000&#10;&#10;# Установка зависимостей&#10;RUN apt-get update &amp;&amp; apt-get install -y \&#10;    git \&#10;    curl \&#10;    libpng-dev \&#10;    libonig-dev \&#10;    libxml2-dev \&#10;    libpq-dev \&#10;    zip \&#10;    unzip \&#10;    supervisor \&#10;    &amp;&amp; mkdir -p /var/log/supervisor \&#10;    &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;# Установка PHP расширений (добавлено sockets)&#10;RUN docker-php-ext-install \&#10;    pgsql \&#10;    pdo_pgsql \&#10;    mbstring \&#10;    exif \&#10;    pcntl \&#10;    bcmath \&#10;    gd \&#10;    sockets&#10;&#10;# Установка Composer&#10;COPY --from=composer:latest /usr/bin/composer /usr/bin/composer&#10;&#10;# Синхронизация UID/GID с хостом&#10;RUN groupmod -o -g ${GROUP_ID} www-data \&#10;    &amp;&amp; usermod -o -u ${USER_ID} -g www-data www-data&#10;&#10;# Установка рабочей директории&#10;WORKDIR /var/www/html&#10;&#10;# Изменение прав на директории логов&#10;RUN chown -R www-data:www-data /var/log/supervisor&#10;&#10;# PHP-FPM слушает на порту 9000&#10;EXPOSE 9000&#10;&#10;# Для notification сервиса также экспонируем порт 8080 для Reverb&#10;EXPOSE 8080&#10;&#10;# Supervisor запускается от root, но процессы от www-data&#10;USER root&#10;&#10;# Команда по умолчанию - supervisor&#10;CMD [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]" />
              <option name="updatedContent" value="FROM php:8.4-fpm&#10;&#10;# Получаем UID/GID из аргументов сборки&#10;ARG USER_ID=1000&#10;ARG GROUP_ID=1000&#10;&#10;# Установка зависимостей&#10;RUN apt-get update &amp;&amp; apt-get install -y \&#10;    git \&#10;    curl \&#10;    libpng-dev \&#10;    libonig-dev \&#10;    libxml2-dev \&#10;    libpq-dev \&#10;    zip \&#10;    unzip \&#10;    supervisor \&#10;    &amp;&amp; mkdir -p /var/log/supervisor \&#10;    &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;# Установка PHP расширений (добавлено sockets)&#10;RUN docker-php-ext-install \&#10;    pgsql \&#10;    pdo_pgsql \&#10;    mbstring \&#10;    exif \&#10;    pcntl \&#10;    bcmath \&#10;    gd \&#10;    sockets&#10;&#10;# Установка Composer&#10;COPY --from=composer:latest /usr/bin/composer /usr/bin/composer&#10;&#10;# Синхронизация UID/GID с хостом&#10;RUN groupmod -o -g ${GROUP_ID} www-data \&#10;    &amp;&amp; usermod -o -u ${USER_ID} -g www-data www-data&#10;&#10;# Установка рабочей директории&#10;WORKDIR /var/www/html&#10;&#10;# Изменение прав на директории логов&#10;RUN chown -R www-data:www-data /var/log/supervisor&#10;&#10;# Создание директорий для логов приложения&#10;RUN mkdir -p /var/log/app &amp;&amp; chown -R www-data:www-data /var/log/app&#10;&#10;# PHP-FPM слушает на порту 9000&#10;EXPOSE 9000&#10;&#10;# Для notification сервиса также экспонируем порт 8080 для Reverb&#10;EXPOSE 8080&#10;&#10;# Supervisor запускается от root, но процессы от www-data&#10;USER root&#10;&#10;# Команда по умолчанию - supervisor&#10;CMD [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/app/components/Cart/Cart.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/app/components/Cart/Cart.vue" />
              <option name="originalContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;import Item from './Item.vue';&#10;const cartStore = useCartStore();&#10;&#10;function checkout() {&#10;  console.log('Proceeding to checkout with items:', cartStore.items);&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;  &lt;div class=&quot;cart p-4 bg-white rounded-lg shadow-md&quot;&gt;&#10;    &lt;h2 class=&quot;text-xl font-semibold mb-4&quot;&gt;Your Cart&lt;/h2&gt;&#10;    &#10;    &lt;div v-if=&quot;cartStore.items.length &gt; 0&quot;&gt;&#10;      &lt;Item&#10;        v-for=&quot;item in cartStore.items&quot;&#10;        :key=&quot;item.id&quot;&#10;        :item=&quot;item&quot;&#10;        :isMaxQuantity=&quot;cartStore.isMaxQuantity&quot;&#10;        :isMinQuantity=&quot;cartStore.isMinQuantity&quot;&#10;        @increase=&quot;cartStore.increaseQuantity&quot;&#10;        @decrease=&quot;cartStore.decreaseQuantity&quot;&#10;        @remove=&quot;cartStore.removeItem&quot;&#10;      /&gt;&#10;&#10;      &lt;div class=&quot;flex justify-between font-semibold text-lg mt-4 pt-2&quot;&gt;&#10;        &lt;span&gt;Total:&lt;/span&gt;&#10;        &lt;span&gt;{{ cartStore.totalPrice }} ₴&lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;button @click=&quot;checkout&quot; class=&quot;w-full mt-4 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded&quot;&gt;&#10;        Checkout&#10;      &lt;/button&gt;&#10;    &lt;/div&gt;&#10;    &#10;    &lt;div v-else class=&quot;text-gray-500 text-center py-4&quot;&gt;&#10;      Your cart is empty&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style scoped&gt;&#10;.cart {&#10;  min-height: 300px;&#10;  width: 100%;&#10;}&#10;&lt;/style&gt;" />
              <option name="updatedContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;import Item from './Item.vue';&#10;const cartStore = useCartStore();&#10;&#10;function checkout() {&#10;  console.log('Proceeding to checkout with items:', cartStore.items);&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;  &lt;div class=&quot;cart p-4 bg-white rounded-lg shadow-md&quot;&gt;&#10;    &lt;h2 class=&quot;text-xl font-semibold mb-4&quot;&gt;Your Cart&lt;/h2&gt;&#10;    &#10;    &lt;div v-if=&quot;cartStore.items.length &gt; 0&quot;&gt;&#10;      &lt;Item&#10;        v-for=&quot;item in cartStore.items&quot;&#10;        :key=&quot;item.id&quot;&#10;        :item=&quot;item&quot;&#10;        @increase=&quot;cartStore.increaseQuantity&quot;&#10;        @decrease=&quot;cartStore.decreaseQuantity&quot;&#10;        @remove=&quot;cartStore.removeItem&quot;&#10;      /&gt;&#10;&#10;      &lt;div class=&quot;flex justify-between font-semibold text-lg mt-4 pt-2&quot;&gt;&#10;        &lt;span&gt;Total:&lt;/span&gt;&#10;        &lt;span&gt;{{ cartStore.totalPrice }} ₴&lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;button @click=&quot;checkout&quot; class=&quot;w-full mt-4 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded&quot;&gt;&#10;        Checkout&#10;      &lt;/button&gt;&#10;    &lt;/div&gt;&#10;    &#10;    &lt;div v-else class=&quot;text-gray-500 text-center py-4&quot;&gt;&#10;      Your cart is empty&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style scoped&gt;&#10;.cart {&#10;  min-height: 300px;&#10;  width: 100%;&#10;}&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/app/components/Cart/Item.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/app/components/Cart/Item.vue" />
              <option name="originalContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { defineProps, defineEmits } from 'vue';&#10;import type { CartItem } from '~/app/stores/cart';&#10;&#10;const props = defineProps&lt;{&#10;  item: CartItem;&#10;  isMaxQuantity: (id: string | number) =&gt; boolean;&#10;  isMinQuantity: (id: string | number) =&gt; boolean;&#10;}&gt;();&#10;&#10;const emits = defineEmits&lt;{&#10;  (e: 'increase', id: string | number): void;&#10;  (e: 'decrease', id: string | number): void;&#10;  (e: 'remove', id: string | number): void;&#10;}&gt;();&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;  &lt;div class=&quot;flex justify-between items-center mb-3 pb-2 border-b border-gray-200&quot;&gt;&#10;    &lt;div&gt;&#10;      &lt;div class=&quot;font-medium&quot;&gt;{{ item.name }}&lt;/div&gt;&#10;      &lt;div class=&quot;text-sm text-gray-600&quot;&gt;{{ item.price }} × {{ item.quantity }} ₴&lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;flex items-center&quot;&gt;&#10;      &lt;div class=&quot;flex items-center mr-3&quot;&gt;&#10;        &lt;button&#10;          @click=&quot;emits('decrease', item.id)&quot;&#10;          class=&quot;w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 font-bold&quot;&#10;          :disabled=&quot;props.isMinQuantity(item.id)&quot;&#10;          :class=&quot;{ 'opacity-50 cursor-not-allowed': props.isMinQuantity(item.id) }&quot;&#10;        &gt;&#10;          &lt;UIcon name=&quot;i-heroicons-minus&quot; /&gt;&#10;        &lt;/button&gt;&#10;        &lt;span class=&quot;px-3 py-1 bg-gray-50&quot;&gt;{{ item.quantity }}&lt;/span&gt;&#10;        &lt;button&#10;          @click=&quot;emits('increase', item.id)&quot;&#10;          class=&quot;w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 font-bold&quot;&#10;          :disabled=&quot;props.isMaxQuantity(item.id)&quot;&#10;          :class=&quot;{ 'opacity-50 cursor-not-allowed': props.isMaxQuantity(item.id) }&quot;&#10;        &gt;&#10;          &lt;UIcon name=&quot;i-heroicons-plus&quot; /&gt;&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;font-medium mr-3&quot;&gt;{{ item.price * item.quantity }} ₴&lt;/div&gt;&#10;      &lt;button @click=&quot;emits('remove', item.id)&quot; class=&quot;text-red-500 hover:text-red-700 text-xl p-1 cursor-pointer&quot;&gt;&#10;        &lt;span class=&quot;text-xl&quot;&gt;×&lt;/span&gt;&#10;      &lt;/button&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style scoped&gt;&#10;&#10;&lt;/style&gt;" />
              <option name="updatedContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { defineProps, defineEmits, computed } from 'vue';&#10;import { useCartStore } from '~/app/stores/cart';&#10;import type { CartItem } from '~/app/stores/cart';&#10;&#10;const props = defineProps&lt;{&#10;  item: CartItem;&#10;}&gt;();&#10;&#10;const emits = defineEmits&lt;{&#10;  (e: 'increase', id: string | number): void;&#10;  (e: 'decrease', id: string | number): void;&#10;  (e: 'remove', id: string | number): void;&#10;}&gt;();&#10;&#10;const cartStore = useCartStore();&#10;&#10;const canIncrease = computed(() =&gt; !cartStore.isMaxQuantity(props.item.id));&#10;const canDecrease = computed(() =&gt; !cartStore.isMinQuantity(props.item.id));&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;  &lt;div class=&quot;flex justify-between items-center mb-3 pb-2 border-b border-gray-200&quot;&gt;&#10;    &lt;div&gt;&#10;      &lt;div class=&quot;font-medium&quot;&gt;{{ item.name }}&lt;/div&gt;&#10;      &lt;div class=&quot;text-sm text-gray-600&quot;&gt;{{ item.price }} × {{ item.quantity }} ₴&lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;flex items-center&quot;&gt;&#10;      &lt;div class=&quot;flex items-center mr-3&quot;&gt;&#10;        &lt;button&#10;          @click=&quot;emits('decrease', item.id)&quot;&#10;          class=&quot;w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 font-bold&quot;&#10;          :disabled=&quot;!canDecrease&quot;&#10;          :class=&quot;{ 'opacity-50 cursor-not-allowed': !canDecrease }&quot;&#10;        &gt;&#10;          &lt;UIcon name=&quot;i-heroicons-minus&quot; /&gt;&#10;        &lt;/button&gt;&#10;        &lt;span class=&quot;px-3 py-1 bg-gray-50&quot;&gt;{{ item.quantity }}&lt;/span&gt;&#10;        &lt;button&#10;          @click=&quot;emits('increase', item.id)&quot;&#10;          class=&quot;w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 font-bold&quot;&#10;          :disabled=&quot;!canIncrease&quot;&#10;          :class=&quot;{ 'opacity-50 cursor-not-allowed': !canIncrease }&quot;&#10;        &gt;&#10;          &lt;UIcon name=&quot;i-heroicons-plus&quot; /&gt;&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;font-medium mr-3&quot;&gt;{{ item.price * item.quantity }} ₴&lt;/div&gt;&#10;      &lt;button @click=&quot;emits('remove', item.id)&quot; class=&quot;text-red-500 hover:text-red-700 text-xl p-1 cursor-pointer&quot;&gt;&#10;        &lt;span class=&quot;text-xl&quot;&gt;×&lt;/span&gt;&#10;      &lt;/button&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style scoped&gt;&#10;&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="services:&#10;&#10;  postgres:&#10;    image: postgres:15-alpine&#10;    container_name: postgres&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    environment:&#10;      POSTGRES_USER: postgres&#10;      POSTGRES_PASSWORD: postgres&#10;    volumes:&#10;      - ./init:/docker-entrypoint-initdb.d&#10;    healthcheck:&#10;      test: [&quot;CMD-SHELL&quot;, &quot;pg_isready -U postgres&quot;]&#10;      interval: 10s&#10;      timeout: 5s&#10;      retries: 5&#10;    networks:&#10;      - app-network&#10;&#10;  rabbitmq:&#10;    image: rabbitmq:3-management&#10;    container_name: rabbitmq&#10;    ports:&#10;      - &quot;5672:5672&quot;&#10;      - &quot;15672:15672&quot;&#10;    environment:&#10;      RABBITMQ_DEFAULT_USER: admin&#10;      RABBITMQ_DEFAULT_PASS: admin&#10;    volumes:&#10;      - rabbitmq_data:/var/lib/rabbitmq&#10;    networks:&#10;      - app-network&#10;&#10;  redis:&#10;    image: redis:alpine&#10;    container_name: redis&#10;    ports:&#10;      - &quot;6379:6379&quot;&#10;    volumes:&#10;      - redis_data:/data&#10;    networks:&#10;      - app-network&#10;&#10;  nginx:&#10;    image: nginx:alpine&#10;    container_name: nginx&#10;    ports:&#10;      - &quot;80:80&quot;&#10;      - &quot;8080:8080&quot;&#10;    volumes:&#10;      - ./nginx.conf:/etc/nginx/nginx.conf&#10;      - ./catalog/storage:/var/www/catalog/storage&#10;      - ./order/storage:/var/www/order/storage&#10;      - ./notification/storage:/var/www/notification/storage&#10;    depends_on:&#10;      - catalog&#10;      - order&#10;      - notification&#10;      - client&#10;    networks:&#10;      - app-network&#10;&#10;  catalog:&#10;    build:&#10;      context: .&#10;      dockerfile: Dockerfile&#10;      args:&#10;        USER_ID: ${UID:-1000}&#10;        GROUP_ID: ${GID:-1000}&#10;    container_name: catalog&#10;    ports:&#10;      - &quot;9001:9001&quot;&#10;    volumes:&#10;      - ./catalog:/var/www/html&#10;      - ./docker/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf&#10;      - ./docker/supervisor/catalog.conf:/etc/supervisor/conf.d/catalog.conf&#10;    command: [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]&#10;    depends_on:&#10;      - redis&#10;      - rabbitmq&#10;      - postgres&#10;    networks:&#10;      - app-network&#10;&#10;  order:&#10;    build:&#10;      context: .&#10;      dockerfile: Dockerfile&#10;      args:&#10;        USER_ID: ${UID:-1000}&#10;        GROUP_ID: ${GID:-1000}&#10;    container_name: order&#10;    ports:&#10;      - &quot;9002:9001&quot;&#10;    volumes:&#10;      - ./order:/var/www/html&#10;      - ./docker/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf&#10;      - ./docker/supervisor/order.conf:/etc/supervisor/conf.d/order.conf&#10;    command: [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]&#10;    depends_on:&#10;      - redis&#10;      - rabbitmq&#10;      - postgres&#10;    networks:&#10;      - app-network&#10;&#10;  notification:&#10;    build:&#10;      context: .&#10;      dockerfile: Dockerfile&#10;      args:&#10;        USER_ID: ${UID:-1000}&#10;        GROUP_ID: ${GID:-1000}&#10;    container_name: notification&#10;    ports:&#10;      - &quot;9003:9001&quot;&#10;    volumes:&#10;      - ./notification:/var/www/html&#10;      - ./docker/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf&#10;      - ./docker/supervisor/notification.conf:/etc/supervisor/conf.d/notification.conf&#10;    command: [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]&#10;    depends_on:&#10;      - redis&#10;      - rabbitmq&#10;      - postgres&#10;    networks:&#10;      - app-network&#10;&#10;  client:&#10;    build:&#10;      context: ./client&#10;      dockerfile: Dockerfile&#10;    container_name: client&#10;    ports:&#10;      - &quot;3000:3000&quot;&#10;      - &quot;24678:24678&quot;&#10;    volumes:&#10;      - ./client:/app&#10;      - node_modules:/app/node_modules&#10;    command: npm run dev&#10;    depends_on:&#10;      - catalog&#10;      - order&#10;      - notification&#10;    networks:&#10;      - app-network&#10;&#10;  loki:&#10;    image: grafana/loki:2.9.4&#10;    container_name: loki&#10;    ports:&#10;      - &quot;3100:3100&quot;&#10;    command: -config.file=/etc/loki/local-config.yaml&#10;    volumes:&#10;      - ./docker/loki/local-config.yaml:/etc/loki/local-config.yaml&#10;      - loki_data:/tmp/loki&#10;    networks:&#10;      - app-network&#10;&#10;  promtail:&#10;    image: grafana/promtail:2.9.4&#10;    container_name: promtail&#10;    volumes:&#10;      - ./docker/promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml&#10;      - ./catalog:/var/log/catalog:ro&#10;      - ./order:/var/log/order:ro&#10;      - ./notification:/var/log/notification:ro&#10;      - /var/log/supervisor:/var/log/supervisor:ro&#10;    command: -config.file=/etc/promtail/promtail-config.yaml&#10;    networks:&#10;      - app-network&#10;&#10;  grafana:&#10;    image: grafana/grafana:10.2.3&#10;    container_name: grafana&#10;    ports:&#10;      - &quot;3001:3000&quot;&#10;    environment:&#10;      - GF_SECURITY_ADMIN_PASSWORD=admin&#10;    volumes:&#10;      - grafana_data:/var/lib/grafana&#10;    networks:&#10;      - app-network&#10;&#10;volumes:&#10;  rabbitmq_data:&#10;  redis_data:&#10;  node_modules:&#10;  grafana_data:&#10;  loki_data:&#10;&#10;networks:&#10;  app-network:&#10;    driver: bridge" />
              <option name="updatedContent" value="services:&#10;&#10;  postgres:&#10;    image: postgres:15-alpine&#10;    container_name: postgres&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    environment:&#10;      POSTGRES_USER: postgres&#10;      POSTGRES_PASSWORD: postgres&#10;    volumes:&#10;      - ./init:/docker-entrypoint-initdb.d&#10;    healthcheck:&#10;      test: [&quot;CMD-SHELL&quot;, &quot;pg_isready -U postgres&quot;]&#10;      interval: 10s&#10;      timeout: 5s&#10;      retries: 5&#10;    networks:&#10;      - app-network&#10;&#10;  rabbitmq:&#10;    image: rabbitmq:3-management&#10;    container_name: rabbitmq&#10;    ports:&#10;      - &quot;5672:5672&quot;&#10;      - &quot;15672:15672&quot;&#10;    environment:&#10;      RABBITMQ_DEFAULT_USER: admin&#10;      RABBITMQ_DEFAULT_PASS: admin&#10;    volumes:&#10;      - rabbitmq_data:/var/lib/rabbitmq&#10;    networks:&#10;      - app-network&#10;&#10;  redis:&#10;    image: redis:alpine&#10;    container_name: redis&#10;    ports:&#10;      - &quot;6379:6379&quot;&#10;    volumes:&#10;      - redis_data:/data&#10;    networks:&#10;      - app-network&#10;&#10;  nginx:&#10;    image: nginx:alpine&#10;    container_name: nginx&#10;    ports:&#10;      - &quot;80:80&quot;&#10;      - &quot;8080:8080&quot;&#10;    volumes:&#10;      - ./nginx.conf:/etc/nginx/nginx.conf&#10;      - ./catalog/storage:/var/www/catalog/storage&#10;      - ./order/storage:/var/www/order/storage&#10;      - ./notification/storage:/var/www/notification/storage&#10;    depends_on:&#10;      - catalog&#10;      - order&#10;      - notification&#10;      - client&#10;    networks:&#10;      - app-network&#10;&#10;  catalog:&#10;    build:&#10;      context: .&#10;      dockerfile: Dockerfile&#10;      args:&#10;        USER_ID: ${UID:-1000}&#10;        GROUP_ID: ${GID:-1000}&#10;    container_name: catalog&#10;    ports:&#10;      - &quot;9001:9001&quot;&#10;    volumes:&#10;      - ./catalog:/var/www/html&#10;      - ./docker/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf&#10;      - ./docker/supervisor/catalog.conf:/etc/supervisor/conf.d/catalog.conf&#10;    command: [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]&#10;    depends_on:&#10;      - redis&#10;      - rabbitmq&#10;      - postgres&#10;    networks:&#10;      - app-network&#10;&#10;  order:&#10;    build:&#10;      context: .&#10;      dockerfile: Dockerfile&#10;      args:&#10;        USER_ID: ${UID:-1000}&#10;        GROUP_ID: ${GID:-1000}&#10;    container_name: order&#10;    ports:&#10;      - &quot;9002:9001&quot;&#10;    volumes:&#10;      - ./order:/var/www/html&#10;      - ./docker/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf&#10;      - ./docker/supervisor/order.conf:/etc/supervisor/conf.d/order.conf&#10;    command: [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]&#10;    depends_on:&#10;      - redis&#10;      - rabbitmq&#10;      - postgres&#10;    networks:&#10;      - app-network&#10;&#10;  notification:&#10;    build:&#10;      context: .&#10;      dockerfile: Dockerfile&#10;      args:&#10;        USER_ID: ${UID:-1000}&#10;        GROUP_ID: ${GID:-1000}&#10;    container_name: notification&#10;    ports:&#10;      - &quot;9003:9001&quot;&#10;    volumes:&#10;      - ./notification:/var/www/html&#10;      - ./docker/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf&#10;      - ./docker/supervisor/notification.conf:/etc/supervisor/conf.d/notification.conf&#10;    command: [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]&#10;    depends_on:&#10;      - redis&#10;      - rabbitmq&#10;      - postgres&#10;    networks:&#10;      - app-network&#10;&#10;  client:&#10;    build:&#10;      context: ./client&#10;      dockerfile: Dockerfile&#10;    container_name: client&#10;    ports:&#10;      - &quot;3000:3000&quot;&#10;      - &quot;24678:24678&quot;&#10;    volumes:&#10;      - ./client:/app&#10;      - node_modules:/app/node_modules&#10;    command: npm run dev&#10;    depends_on:&#10;      - catalog&#10;      - order&#10;      - notification&#10;    networks:&#10;      - app-network&#10;&#10;  loki:&#10;    image: grafana/loki:2.9.4&#10;    container_name: loki&#10;    ports:&#10;      - &quot;3100:3100&quot;&#10;    command: -config.file=/etc/loki/local-config.yaml&#10;    volumes:&#10;      - ./docker/loki/local-config.yaml:/etc/loki/local-config.yaml&#10;      - loki_data:/tmp/loki&#10;    networks:&#10;      - app-network&#10;&#10;  promtail:&#10;    image: grafana/promtail:2.9.4&#10;    container_name: promtail&#10;    volumes:&#10;      - ./docker/promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml&#10;      - ./catalog:/var/log/catalog:ro&#10;      - ./order:/var/log/order:ro&#10;      - ./notification:/var/log/notification:ro&#10;      - /var/log/supervisor:/var/log/supervisor:ro&#10;    command: -config.file=/etc/promtail/promtail-config.yaml&#10;    networks:&#10;      - app-network&#10;&#10;  grafana:&#10;    image: grafana/grafana:10.2.3&#10;    container_name: grafana&#10;    ports:&#10;      - &quot;3001:3000&quot;&#10;    environment:&#10;      - GF_SECURITY_ADMIN_PASSWORD=admin&#10;      - GF_INSTALL_PLUGINS=grafana-loki&#10;      - GF_DATASOURCES_DEFAULT_NAME=Loki&#10;      - GF_DATASOURCES_DEFAULT_TYPE=loki&#10;      - GF_DATASOURCES_DEFAULT_URL=http://loki:3100&#10;    volumes:&#10;      - grafana_data:/var/lib/grafana&#10;    networks:&#10;      - app-network&#10;&#10;volumes:&#10;  rabbitmq_data:&#10;  redis_data:&#10;  node_modules:&#10;  grafana_data:&#10;  loki_data:&#10;&#10;networks:&#10;  app-network:&#10;    driver: bridge" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker/loki/local-config.yaml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker/loki/local-config.yaml" />
              <option name="originalContent" value="auth_enabled: false&#10;&#10;server:&#10;  http_listen_port: 3100&#10;&#10;ingester:&#10;  lifecycler:&#10;    address: 127.0.0.1&#10;    ring:&#10;      kvstore:&#10;        store: inmemory&#10;    final_sleep: 0s&#10;  chunk_idle_period: 5m&#10;  max_chunk_age: 1h&#10;  chunk_target_size: 1048576&#10;&#10;schema_config:&#10;  configs:&#10;    - from: 2020-10-24&#10;      store: boltdb-shipper&#10;      object_store: filesystem&#10;      schema: v11&#10;      index:&#10;        prefix: index_&#10;        period: 168h&#10;&#10;storage_config:&#10;  boltdb_shipper:&#10;    active_index_directory: /tmp/loki/index&#10;    cache_location: /tmp/loki/index_cache&#10;    shared_store: filesystem&#10;  filesystem:&#10;    directory: /tmp/loki/chunks&#10;&#10;limits_config:&#10;  enforce_metric_name: false&#10;  reject_old_samples: true&#10;  reject_old_samples_max_age: 168h&#10;&#10;chunk_store_config:&#10;  max_look_back_period: 0s&#10;&#10;table_manager:&#10;  retention_deletes_enabled: true&#10;  retention_period: 168h&#10;````&#10;&#10;&lt;/file&gt;&#10;&#10;#### \\wsl.localhost\Ubuntu-22.04\home\eugene\projects\pizza\docker\promtail\promtail-config.yaml&#10;&#10;&lt;file&gt;&#10;````yaml&#10;// filepath: \\wsl.localhost\Ubuntu-22.04\home\eugene\projects\pizza\docker\promtail\promtail-config.yaml&#10;server:&#10;  http_listen_port: 9080&#10;  grpc_listen_port: 0&#10;&#10;positions:&#10;  filename: /tmp/positions.yaml&#10;&#10;clients:&#10;  - url: http://loki:3100/loki/api/v1/push&#10;&#10;scrape_configs:&#10;  - job_name: supervisor&#10;    static_configs:&#10;      - targets: []&#10;        labels:&#10;          job: supervisor&#10;          __path__: /var/log/supervisor/*.log&#10;&#10;  - job_name: catalog_app&#10;    static_configs:&#10;      - targets: []&#10;        labels:&#10;          job: catalog_app&#10;          __path__: /var/log/catalog/logs/*.log&#10;&#10;  - job_name: order_app&#10;    static_configs:&#10;      - targets: []&#10;        labels:&#10;          job: order_app&#10;          __path__: /var/log/order/logs/*.log&#10;&#10;  - job_name: notification_app&#10;    static_configs:&#10;      - targets: []&#10;        labels:&#10;          job: notification_app&#10;          __path__: /var/log/notification/logs/*.log&#10;````&#10;&#10;&lt;/file&gt;&#10;&#10;---&#10;&#10;**Итог:**  &#10;Теперь все логи Supervisor и приложений будут собираться Promtail и доступны для просмотра в Grafana (порт 3001).  &#10;Не забудьте настроить приложения на запись логов в соответствующие файлы (`/var/log/{service}/logs/*.log`).  &#10;Grafana автоматически обнаружит Loki как источник данных, и вы сможете строить дашборды и искать логи по всем сервисам.&#10;" />
              <option name="updatedContent" value="auth_enabled: false&#10;&#10;server:&#10;  http_listen_port: 3100&#10;&#10;ingester:&#10;  lifecycler:&#10;    address: 127.0.0.1&#10;    ring:&#10;      kvstore:&#10;        store: inmemory&#10;    final_sleep: 0s&#10;  chunk_idle_period: 5m&#10;  max_chunk_age: 1h&#10;  chunk_target_size: 1048576&#10;&#10;schema_config:&#10;  configs:&#10;    - from: 2020-10-24&#10;      store: boltdb-shipper&#10;      object_store: filesystem&#10;      schema: v11&#10;      index:&#10;        prefix: index_&#10;        period: 168h&#10;&#10;storage_config:&#10;  boltdb_shipper:&#10;    active_index_directory: /tmp/loki/index&#10;    cache_location: /tmp/loki/index_cache&#10;    shared_store: filesystem&#10;  filesystem:&#10;    directory: /tmp/loki/chunks&#10;&#10;limits_config:&#10;  enforce_metric_name: false&#10;  reject_old_samples: true&#10;  reject_old_samples_max_age: 168h&#10;&#10;chunk_store_config:&#10;  max_look_back_period: 0s&#10;&#10;table_manager:&#10;  retention_deletes_enabled: true&#10;  retention_period: 168h" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker/supervisor/supervisord.conf">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker/supervisor/supervisord.conf" />
              <option name="originalContent" value="[unix_http_server]&#10;file=/var/run/supervisor.sock&#10;chmod=0700&#10;&#10;[supervisord]&#10;logfile=/var/log/supervisor/supervisord.log&#10;pidfile=/var/run/supervisord.pid&#10;childlogdir=/var/log/supervisor&#10;user=root&#10;nodaemon=true&#10;&#10;[rpcinterface:supervisor]&#10;supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface&#10;&#10;[supervisorctl]&#10;serverurl=unix:///var/run/supervisor.sock&#10;&#10;[inet_http_server]&#10;port=0.0.0.0:9001&#10;username=admin&#10;password=admin&#10;&#10;[include]&#10;files = /etc/supervisor/conf.d/*.conf&#10;" />
              <option name="updatedContent" value="[unix_http_server]&#10;file=/var/run/supervisor.sock&#10;chmod=0700&#10;&#10;[supervisord]&#10;logfile=/var/log/supervisor/supervisord.log&#10;childlogdir=/var/log/supervisor&#10;user=root&#10;nodaemon=true&#10;&#10;[rpcinterface:supervisor]&#10;supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface&#10;&#10;[supervisorctl]&#10;serverurl=unix:///var/run/supervisor.sock&#10;&#10;[inet_http_server]&#10;port=0.0.0.0:9001&#10;username=admin&#10;password=admin&#10;&#10;[include]&#10;files = /etc/supervisor/conf.d/*.conf" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/order/app/Console/Commands/AMQPSetupCommand.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/order/app/Console/Commands/AMQPSetupCommand.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;namespace App\Console\Commands;&#10;&#10;use Jonston\AmqpLaravel\AMQPService;&#10;use Illuminate\Console\Command;&#10;&#10;class AMQPSetupCommand extends Command&#10;{&#10;    protected $signature = 'amqp:setup {--force : Force setup even in production}';&#10;    protected $description = 'Setup AMQP exchanges and queues';&#10;&#10;    public function handle(AMQPService $amqpService): int&#10;    {&#10;        try {&#10;            if (app()-&gt;environment('production') &amp;&amp; !$this-&gt;option('force')) {&#10;                $this-&gt;warn('Skipping queue setup in production. Use --force to override.');&#10;                return 0;&#10;            }&#10;&#10;            $this-&gt;info('Setting up AMQP infrastructure...');&#10;&#10;            $channel = $amqpService-&gt;getChannel();&#10;&#10;            $exchanges = config('amqp.exchanges', []);&#10;            $this-&gt;info(&quot;Creating &quot; . count($exchanges) . &quot; exchanges...&quot;);&#10;&#10;            foreach ($exchanges as $exchangeName =&gt; $exchangeConfig) {&#10;                try {&#10;                    $channel-&gt;exchange_declare(&#10;                        $exchangeName,&#10;                        $exchangeConfig['type'] ?? 'direct',&#10;                        $exchangeConfig['passive'] ?? false,&#10;                        $exchangeConfig['durable'] ?? true,&#10;                        $exchangeConfig['auto_delete'] ?? false,&#10;                        $exchangeConfig['internal'] ?? false,&#10;                        $exchangeConfig['nowait'] ?? false,&#10;                        $exchangeConfig['arguments'] ?? []&#10;                    );&#10;&#10;                    $this-&gt;line(&quot;  ✓ Exchange: {$exchangeName}&quot;);&#10;&#10;                } catch (\Exception $e) {&#10;                    $error = &quot;Failed to create exchange '{$exchangeName}': {$e-&gt;getMessage()}&quot;;&#10;                    $this-&gt;error(&quot;  ✗ {$error}&quot;);&#10;&#10;                    logger()-&gt;error('AMQP exchange creation failed', [&#10;                        'exchange' =&gt; $exchangeName,&#10;                        'config' =&gt; $exchangeConfig,&#10;                        'error' =&gt; $e-&gt;getMessage(),&#10;                        'trace' =&gt; $e-&gt;getTraceAsString()&#10;                    ]);&#10;&#10;                    return 1;&#10;                }&#10;            }&#10;&#10;            $queues = config('amqp.queues', []);&#10;            $this-&gt;info(&quot;Creating &quot; . count($queues) . &quot; queues...&quot;);&#10;&#10;            foreach ($queues as $queueName =&gt; $queueConfig) {&#10;                try {&#10;                    $channel-&gt;queue_declare(&#10;                        $queueName,&#10;                        $queueConfig['passive'] ?? false,&#10;                        $queueConfig['durable'] ?? true,&#10;                        $queueConfig['exclusive'] ?? false,&#10;                        $queueConfig['auto_delete'] ?? false,&#10;                        $queueConfig['nowait'] ?? false,&#10;                        $queueConfig['arguments'] ?? []&#10;                    );&#10;&#10;                    $this-&gt;line(&quot;  ✓ Queue: {$queueName}&quot;);&#10;&#10;                    if (!empty($queueConfig['exchange'])) {&#10;                        $channel-&gt;queue_bind(&#10;                            $queueName,&#10;                            $queueConfig['exchange'],&#10;                            $queueConfig['routing_key'] ?? ''&#10;                        );&#10;&#10;                        $this-&gt;line(&quot;    → Bound to: {$queueConfig['exchange']}&quot;);&#10;                    }&#10;&#10;                } catch (\Exception $e) {&#10;                    $error = &quot;Failed to create queue '{$queueName}': {$e-&gt;getMessage()}&quot;;&#10;                    $this-&gt;error(&quot;  ✗ {$error}&quot;);&#10;&#10;                    logger()-&gt;error('AMQP queue creation failed', [&#10;                        'queue' =&gt; $queueName,&#10;                        'config' =&gt; $queueConfig,&#10;                        'error' =&gt; $e-&gt;getMessage(),&#10;                        'trace' =&gt; $e-&gt;getTraceAsString()&#10;                    ]);&#10;&#10;                    return 1;&#10;                }&#10;            }&#10;&#10;            $successMessage = 'AMQP setup completed successfully';&#10;            $this-&gt;info(&quot;✅ {$successMessage}&quot;);&#10;&#10;            logger()-&gt;info('AMQP setup completed', [&#10;                'exchanges_count' =&gt; count($exchanges),&#10;                'queues_count' =&gt; count($queues)&#10;            ]);&#10;&#10;            return 0;&#10;&#10;        } catch (\Exception $e) {&#10;            $criticalError = &quot;Critical AMQP setup failure: {$e-&gt;getMessage()}&quot;;&#10;            $this-&gt;error(&quot;❌ {$criticalError}&quot;);&#10;&#10;            logger()-&gt;critical('AMQP setup critical failure', [&#10;                'error' =&gt; $e-&gt;getMessage(),&#10;                'file' =&gt; $e-&gt;getFile(),&#10;                'line' =&gt; $e-&gt;getLine(),&#10;                'trace' =&gt; $e-&gt;getTraceAsString()&#10;            ]);&#10;&#10;            if (app()-&gt;environment(['local', 'testing'])) {&#10;                $this-&gt;line('&lt;fg=red&gt;Stack trace:&lt;/&gt;');&#10;                $this-&gt;line($e-&gt;getTraceAsString());&#10;            }&#10;&#10;            return 1;&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;namespace App\Console\Commands;&#10;&#10;use Jonston\AmqpLaravel\AMQPService;&#10;use Illuminate\Console\Command;&#10;&#10;class AMQPSetupCommand extends Command&#10;{&#10;    protected $signature = 'amqp:setup {--force : Force setup even in production}';&#10;    protected $description = 'Setup AMQP exchanges and queues';&#10;&#10;    public function handle(AMQPService $amqpService): int&#10;    {&#10;        try {&#10;            if (app()-&gt;environment('production') &amp;&amp; !$this-&gt;option('force')) {&#10;                $this-&gt;warn('Skipping queue setup in production. Use --force to override.');&#10;                return 0;&#10;            }&#10;&#10;            $this-&gt;info('Setting up AMQP infrastructure...');&#10;&#10;            $exchanges = config('amqp.exchanges', []);&#10;            $queues = config('amqp.queues', []);&#10;            &#10;            $this-&gt;info(&quot;Creating &quot; . count($exchanges) . &quot; exchanges...&quot;);&#10;            $this-&gt;info(&quot;Creating &quot; . count($queues) . &quot; queues...&quot;);&#10;&#10;            $amqpService-&gt;setupFromConfig();&#10;&#10;            $successMessage = 'AMQP setup completed successfully';&#10;            $this-&gt;info(&quot;✅ {$successMessage}&quot;);&#10;&#10;            logger()-&gt;info('AMQP setup completed', [&#10;                'exchanges_count' =&gt; count($exchanges),&#10;                'queues_count' =&gt; count($queues)&#10;            ]);&#10;&#10;            return 0;&#10;&#10;        } catch (\Exception $e) {&#10;            $criticalError = &quot;Critical AMQP setup failure: {$e-&gt;getMessage()}&quot;;&#10;            $this-&gt;error(&quot;❌ {$criticalError}&quot;);&#10;&#10;            logger()-&gt;critical('AMQP setup critical failure', [&#10;                'error' =&gt; $e-&gt;getMessage(),&#10;                'file' =&gt; $e-&gt;getFile(),&#10;                'line' =&gt; $e-&gt;getLine(),&#10;                'trace' =&gt; $e-&gt;getTraceAsString()&#10;            ]);&#10;&#10;            if (app()-&gt;environment(['local', 'testing'])) {&#10;                $this-&gt;line('&lt;fg=red&gt;Stack trace:&lt;/&gt;');&#10;                $this-&gt;line($e-&gt;getTraceAsString());&#10;            }&#10;&#10;            return 1;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/supervisor/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/supervisor/Dockerfile" />
              <option name="originalContent" value="# supervisor/Dockerfile&#10;FROM debian:bullseye-slim&#10;&#10;RUN apt-get update &amp;&amp; apt-get install -y \&#10;    supervisor \&#10;    &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;RUN mkdir -p /var/log/supervisor&#10;&#10;COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf&#10;COPY laravel-workers.conf /etc/supervisor/conf.d/laravel-workers.conf&#10;&#10;CMD [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]" />
              <option name="updatedContent" value="# supervisor/Dockerfile&#10;FROM debian:bullseye-slim&#10;&#10;RUN apt-get update &amp;&amp; apt-get install -y \&#10;    supervisor \&#10;    &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;RUN mkdir -p /var/log/supervisor&#10;&#10;COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf&#10;COPY laravel-workers.conf /etc/supervisor/conf.d/laravel-workers.conf&#10;&#10;CMD [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>