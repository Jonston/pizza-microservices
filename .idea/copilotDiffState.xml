<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/client/app/components/Notification.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/app/components/Notification.vue" />
              <option name="originalContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ORDER_STATUS_EVENTS, getOrderStatusColor, getOrderStatusMessage, OrderStatus } from '~/types/common';&#10;import { onMounted, ref } from 'vue';&#10;&#10;const echo = useEcho();&#10;const toast = useToast();&#10;const orderStore = useOrderStore();&#10;&#10;const channelName = 'notifications';&#10;const subscribed = ref(false);&#10;&#10;interface OrderEventPayload {&#10;  order: {&#10;    id: number | string;&#10;    status: OrderStatus;&#10;  };&#10;}&#10;&#10;function handleEvent(e: OrderEventPayload) {&#10;  if (!e?.order) return;&#10;  const rawId = e.order.id;&#10;  const id = typeof rawId === 'string' ? parseInt(rawId, 10) : rawId;&#10;  const status = e.order.status;&#10;&#10;  orderStore.updateOrderStatus(id, status);&#10;&#10;  toast.add({&#10;    title: getOrderStatusMessage(status),&#10;    description: `Order #${id}`,&#10;    color: getOrderStatusColor(status),&#10;    timeout: 5000&#10;  });&#10;}&#10;&#10;onMounted(() =&gt; {&#10;  if (subscribed.value) return;&#10;  subscribed.value = true;&#10;&#10;  const channel = echo.channel(channelName);&#10;  ORDER_STATUS_EVENTS.forEach(event =&gt;&#10;    channel&#10;      .listen(event, (e: OrderEventPayload) =&gt; handleEvent(e))&#10;      .error(err =&gt; console.error('Order channel error', err))&#10;  );&#10;});&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;  &lt;!-- Toast'ы рендерятся глобально через useToast --&gt;&#10;  &lt;div style=&quot;display:none&quot;&gt;&lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style scoped&gt;&#10;/* нет стилей */&#10;&lt;/style&gt;" />
              <option name="updatedContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { ORDER_STATUS_EVENTS, getOrderStatusColor, getOrderStatusMessage, OrderStatus } from '~/types/common';&#10;import { onMounted, ref } from 'vue';&#10;&#10;const echo = useEcho();&#10;const toast = useToast();&#10;const orderStore = useOrderStore();&#10;&#10;const channelName = 'notifications';&#10;const subscribed = ref(false);&#10;&#10;interface OrderEventPayload {&#10;  order: {&#10;    id: number | string;&#10;    status: OrderStatus;&#10;  };&#10;}&#10;&#10;function handleEvent(e: OrderEventPayload) {&#10;  if (!e?.order) return;&#10;  const rawId = e.order.id;&#10;  const id = typeof rawId === 'string' ? parseInt(rawId, 10) : rawId;&#10;  const status = e.order.status;&#10;&#10;  orderStore.updateOrderStatus(id, status);&#10;&#10;  toast.add({&#10;    title: getOrderStatusMessage(status),&#10;    description: `Order #${id}`,&#10;    color: getOrderStatusColor(status),&#10;    timeout: 5000&#10;  });&#10;}&#10;&#10;onMounted(() =&gt; {&#10;  if (subscribed.value) return;&#10;  subscribed.value = true;&#10;&#10;  const channel = echo.channel(channelName);&#10;  ORDER_STATUS_EVENTS.forEach(event =&gt;&#10;    channel&#10;      .listen(event, (e: OrderEventPayload) =&gt; handleEvent(e))&#10;      .error(err =&gt; console.error('Order channel error', err))&#10;  );&#10;});&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;  &lt;!-- Toast'ы рендерятся глобально через useToast --&gt;&#10;  &lt;div style=&quot;display:none&quot;&gt;&lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style scoped&gt;&#10;/* нет стилей */&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/app/components/Order/List.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/app/components/Order/List.vue" />
              <option name="originalContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;import {type Order, type OrderItem, OrderStatus, type Product} from '~/types/common';&#10;&#10;const orderStore = useOrderStore();&#10;&#10;await useAsyncData(() =&gt; {&#10;  return orderStore.fetchOrders();&#10;});&#10;&#10;const getOrderTotal = computed(() =&gt; {&#10;  return (order: Order) =&gt; {&#10;    return order.items.reduce((total, item: OrderItem) =&gt; {&#10;      return total + (item.product.price * item.quantity);&#10;    }, 0);&#10;  }&#10;});&#10;&#10;const getStatusColor = (status: OrderStatus) =&gt; {&#10;  switch (status) {&#10;    case OrderStatus.PENDING:&#10;      return 'info';&#10;    case OrderStatus.PROCESSING:&#10;      return 'warning';&#10;    case OrderStatus.DELIVERING:&#10;      return 'warning';&#10;    case OrderStatus.COMPLETED:&#10;      return 'success';&#10;    case OrderStatus.CANCELLED:&#10;      return 'error';&#10;    case OrderStatus.FAILED:&#10;      return 'error';&#10;    default:&#10;      return 'gray';&#10;  }&#10;};&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;  &lt;div class=&quot;order-list p-4 bg-white rounded-lg shadow-md&quot;&gt;&#10;    &lt;h2 class=&quot;text-xl font-semibold mb-4&quot;&gt;Your Orders&lt;/h2&gt;&#10;    &lt;div v-if=&quot;orderStore.orders.length &gt; 0&quot;&gt;&#10;      &lt;div v-for=&quot;order in orderStore.orders&quot; :key=&quot;order.id&quot; class=&quot;mb-3 p-3 border border-gray-200 rounded&quot;&gt;&#10;        &lt;div class=&quot;flex justify-between&quot;&gt;&#10;          &lt;span class=&quot;font-medium&quot;&gt;Order #{{ order.id }}&lt;/span&gt;&#10;          &lt;UBadge&#10;            :color=&quot;getStatusColor(order.status)&quot;&#10;            variant=&quot;subtle&quot;&#10;            size=&quot;lg&quot;&#10;          &gt;&#10;            {{ order.status }}&#10;          &lt;/UBadge&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;text-sm text-gray-600 mt-1&quot;&gt;&#10;          &lt;div class=&quot;font-medium&quot;&gt;&#10;            &lt;span class=&quot;mr-1&quot;&gt;Items:&lt;/span&gt;&#10;            &lt;template v-for=&quot;(item, index) in order.items&quot; :key=&quot;index&quot;&gt;&#10;              &lt;span&gt;{{ item.product.name }} ({{ item.quantity }})&lt;/span&gt;{{ index &lt; order.items.length - 1 ? ', ' : '' }}&#10;            &lt;/template&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;font-medium mt-1&quot;&gt;Total: &lt;span class=&quot;font-bold&quot;&gt;{{ getOrderTotal(order) }} ₴&lt;/span&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div v-else class=&quot;text-gray-500 text-center py-4&quot;&gt;&#10;      No orders yet&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style scoped&gt;&#10;.order-list {&#10;  min-height: 300px;&#10;  width: 100%;&#10;}&#10;&lt;/style&gt;" />
              <option name="updatedContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;import {type Order, type OrderItem, OrderStatus, type Product, getOrderStatusColor} from '~/types/common';&#10;&#10;const orderStore = useOrderStore();&#10;&#10;await useAsyncData(() =&gt; {&#10;  return orderStore.fetchOrders();&#10;});&#10;&#10;const getOrderTotal = computed(() =&gt; {&#10;  return (order: Order) =&gt; {&#10;    return order.items.reduce((total, item: OrderItem) =&gt; {&#10;      return total + (item.product.price * item.quantity);&#10;    }, 0);&#10;  }&#10;});&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;  &lt;div class=&quot;order-list p-4 bg-white rounded-lg shadow-md&quot;&gt;&#10;    &lt;h2 class=&quot;text-xl font-semibold mb-4&quot;&gt;Your Orders&lt;/h2&gt;&#10;    &lt;div v-if=&quot;orderStore.orders.length &gt; 0&quot;&gt;&#10;      &lt;div v-for=&quot;order in orderStore.orders&quot; :key=&quot;order.id&quot; class=&quot;mb-3 p-3 border border-gray-200 rounded&quot;&gt;&#10;        &lt;div class=&quot;flex justify-between&quot;&gt;&#10;          &lt;span class=&quot;font-medium&quot;&gt;Order #{{ order.id }}&lt;/span&gt;&#10;          &lt;UBadge&#10;            :color=&quot;getOrderStatusColor(order.status)&quot;&#10;            variant=&quot;subtle&quot;&#10;            size=&quot;lg&quot;&#10;          &gt;&#10;            {{ order.status }}&#10;          &lt;/UBadge&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;text-sm text-gray-600 mt-1&quot;&gt;&#10;          &lt;div class=&quot;font-medium&quot;&gt;&#10;            &lt;span class=&quot;mr-1&quot;&gt;Items:&lt;/span&gt;&#10;            &lt;template v-for=&quot;(item, index) in order.items&quot; :key=&quot;index&quot;&gt;&#10;              &lt;span&gt;{{ item.product.name }} ({{ item.quantity }})&lt;/span&gt;{{ index &lt; order.items.length - 1 ? ', ' : '' }}&#10;            &lt;/template&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;font-medium mt-1&quot;&gt;Total: &lt;span class=&quot;font-bold&quot;&gt;{{ getOrderTotal(order) }} ₴&lt;/span&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div v-else class=&quot;text-gray-500 text-center py-4&quot;&gt;&#10;      No orders yet&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style scoped&gt;&#10;.order-list {&#10;  min-height: 300px;&#10;  width: 100%;&#10;}&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/app/composables/useOrderEvents.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/app/composables/useOrderEvents.ts" />
              <option name="originalContent" value="import { ORDER_STATUS_EVENTS, getOrderStatusColor, getOrderStatusMessage, OrderStatus } from '~/types/common';&#10;&#10;// ЛОГИКА ПЕРЕНЕСЕНА В components/Notification.vue — файл оставлен только как заглушка.&#10;// Можно удалить после обновления импортов.&#10;export {};&#10;&#10;let _subscribed = false;&#10;&#10;interface OrderEventPayload {&#10;  order: {&#10;    id: string;&#10;    status: OrderStatus;&#10;  };&#10;}&#10;&#10;export function initOrderEvents(channelName = 'notifications') {&#10;  if (_subscribed) return;&#10;  _subscribed = true;&#10;&#10;  const echo = useEcho();&#10;  const toast = useToast();&#10;  const orderStore = useOrderStore();&#10;&#10;  const handle = (payload: OrderEventPayload) =&gt; {&#10;    const { id, status } = payload.order || {};&#10;    if (id == null || !status) {&#10;      console.warn('Некорректное событие заказа', payload);&#10;      return;&#10;    }&#10;&#10;    orderStore.updateOrderStatus(id, status);&#10;&#10;    toast.add({&#10;      title: getOrderStatusMessage(status),&#10;      description: `Order #${id}`,&#10;      color: getOrderStatusColor(status),&#10;      timeout: 5000&#10;    });&#10;  };&#10;&#10;  ORDER_STATUS_EVENTS.forEach(event =&gt;&#10;    echo.channel(channelName)&#10;      .listen(event, (e: OrderEventPayload) =&gt; handle(e))&#10;      .error(err =&gt; console.error('Order events channel error', err))&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { ORDER_STATUS_EVENTS, getOrderStatusColor, getOrderStatusMessage, OrderStatus } from '~/types/common';&#10;&#10;// ЛОГИКА ПЕРЕНЕСЕНА В components/Notification.vue — файл оставлен только как заглушка.&#10;// Можно удалить после обновления импортов.&#10;export {};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/app/stores/order.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/app/stores/order.ts" />
              <option name="originalContent" value="import {defineStore, acceptHMRUpdate} from 'pinia';&#10;import {ref, computed} from 'vue';&#10;import {OrderStatus} from '~/types/common';&#10;import type {Order} from '~/types/common';&#10;&#10;export const useOrderStore = defineStore('order', () =&gt; {&#10;    const baseUrl = import.meta.server ?&#10;        useRuntimeConfig().ordersBaseUrl :&#10;        useRuntimeConfig().public.ordersBaseUrl;&#10;&#10;    const orders = ref&lt;Order[]&gt;([]);&#10;&#10;    const orderCount = computed(() =&gt; {&#10;        return orders.value.length;&#10;    });&#10;&#10;    const getOrderById = (orderId: number) =&gt; {&#10;        return orders.value.find(order =&gt; order.id === orderId);&#10;    };&#10;&#10;    const createOrder = async (items) =&gt; {&#10;        const requestData = {&#10;            items: items.map(item =&gt; ({&#10;                product_id: item.id,&#10;                quantity: item.quantity&#10;            })),&#10;        }&#10;&#10;        const {data, error} = await $fetch('/orders', {&#10;            method: 'POST',&#10;            baseURL: baseUrl,&#10;            body: requestData&#10;        });&#10;&#10;        if (error) {&#10;            throw new Error(`Failed to create order: ${error.value.message}`);&#10;        }&#10;&#10;        console.log('Order created:', data);&#10;&#10;        orders.value.push(data as Order);&#10;&#10;        return data as Order;&#10;    }&#10;&#10;    const fetchOrders = async () =&gt; {&#10;        const {data, error} = await $fetch('/orders', {&#10;            baseURL: baseUrl,&#10;        });&#10;&#10;        if (data) {&#10;            orders.value = data as Order[];&#10;        }&#10;&#10;        return data;&#10;    }&#10;&#10;    function updateOrderStatus(orderId: number, status: OrderStatus) {&#10;        const order = orders.value.find(o =&gt; o.id === orderId);&#10;        if (order) {&#10;            order.status = status;&#10;        }&#10;    }&#10;&#10;    function removeOrder(orderId: number) {&#10;        orders.value = orders.value.filter(order =&gt; order.id !== orderId);&#10;    }&#10;&#10;    return {&#10;        orders,&#10;        orderCount,&#10;        getOrderById,&#10;        createOrder,&#10;        fetchOrders,&#10;        updateOrderStatus,&#10;    };&#10;});&#10;&#10;if (import.meta.hot) {&#10;    import.meta.hot.accept(acceptHMRUpdate(useOrderStore, import.meta.hot))&#10;}&#10;" />
              <option name="updatedContent" value="import {defineStore, acceptHMRUpdate} from 'pinia';&#10;import {ref, computed} from 'vue';&#10;import {OrderStatus} from '~/types/common';&#10;import type {Order} from '~/types/common';&#10;&#10;export const useOrderStore = defineStore('order', () =&gt; {&#10;    const baseUrl = import.meta.server ?&#10;        useRuntimeConfig().ordersBaseUrl :&#10;        useRuntimeConfig().public.ordersBaseUrl;&#10;&#10;    const orders = ref&lt;Order[]&gt;([]);&#10;&#10;    const orderCount = computed(() =&gt; {&#10;        return orders.value.length;&#10;    });&#10;&#10;    const getOrderById = (orderId: number) =&gt; {&#10;        return orders.value.find(order =&gt; order.id === orderId);&#10;    };&#10;&#10;    const createOrder = async (items) =&gt; {&#10;        const requestData = {&#10;            items: items.map(item =&gt; ({&#10;                product_id: item.id,&#10;                quantity: item.quantity&#10;            })),&#10;        }&#10;&#10;        const {data, error} = await $fetch('/orders', {&#10;            method: 'POST',&#10;            baseURL: baseUrl,&#10;            body: requestData&#10;        });&#10;&#10;        if (error) {&#10;            throw new Error(`Failed to create order: ${error.value.message}`);&#10;        }&#10;&#10;        console.log('Order created:', data);&#10;&#10;        orders.value.push(data as Order);&#10;&#10;        return data as Order;&#10;    }&#10;&#10;    const fetchOrders = async () =&gt; {&#10;        const {data, error} = await $fetch('/orders', {&#10;            baseURL: baseUrl,&#10;        });&#10;&#10;        if (data) {&#10;            orders.value = data as Order[];&#10;        }&#10;&#10;        return data;&#10;    }&#10;&#10;    function updateOrderStatus(orderId: number, status: OrderStatus) {&#10;        const order = orders.value.find(o =&gt; o.id === orderId);&#10;        if (order) {&#10;            order.status = status;&#10;        }&#10;    }&#10;&#10;    return {&#10;        orders,&#10;        orderCount,&#10;        getOrderById,&#10;        createOrder,&#10;        fetchOrders,&#10;        updateOrderStatus,&#10;    };&#10;});&#10;&#10;if (import.meta.hot) {&#10;    import.meta.hot.accept(acceptHMRUpdate(useOrderStore, import.meta.hot))&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/app/types/common.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/app/types/common.ts" />
              <option name="originalContent" value="export enum OrderStatus {&#10;  PENDING = 'pending',&#10;  PROCESSING = 'processing',&#10;  DELIVERING = 'delivering',&#10;  COMPLETED = 'completed',&#10;  CANCELLED = 'cancelled',&#10;  FAILED = 'failed'&#10;}&#10;&#10;export interface OrderItem {&#10;    product: Product;&#10;    quantity: number;&#10;}&#10;&#10;export interface Order {&#10;  id: number;&#10;  status: OrderStatus;&#10;  items: OrderItem[];&#10;  total: number;&#10;}&#10;&#10;export interface Product {&#10;    id: string;&#10;    name: string;&#10;    price: string;&#10;    image: string;&#10;}&#10;&#10;export interface CartItem {&#10;    id: string;&#10;    name: string;&#10;    price: number;&#10;    quantity: number;&#10;}&#10;&#10;export const getOrderStatusColor = (status: OrderStatus): string =&gt; {&#10;  switch (status) {&#10;    case OrderStatus.PENDING:&#10;      return 'info';&#10;    case OrderStatus.PROCESSING:&#10;      return 'warning';&#10;    case OrderStatus.DELIVERING:&#10;      return 'warning';&#10;    case OrderStatus.COMPLETED:&#10;      return 'success';&#10;    case OrderStatus.CANCELLED:&#10;    case OrderStatus.FAILED:&#10;      return 'error';&#10;    default:&#10;      return 'gray';&#10;  }&#10;};&#10;&#10;export const getOrderStatusMessage = (status: OrderStatus): string =&gt; {&#10;  switch (status) {&#10;    case OrderStatus.PENDING:&#10;      return 'New order created';&#10;    case OrderStatus.PROCESSING:&#10;      return 'Order is being processed';&#10;    case OrderStatus.DELIVERING:&#10;      return 'Order is being delivered';&#10;    case OrderStatus.COMPLETED:&#10;      return 'Order completed';&#10;    case OrderStatus.CANCELLED:&#10;      return 'Order cancelled';&#10;    case OrderStatus.FAILED:&#10;      return 'Order failed';&#10;    default:&#10;      return 'Order updated';&#10;  }&#10;};&#10;&#10;export const ORDER_STATUS_EVENTS = [&#10;  '.order.created',&#10;  '.order.processed',&#10;  '.order.delivered',&#10;  '.order.completed',&#10;  '.order.cancelled',&#10;  '.order.failed'&#10;];&#10;" />
              <option name="updatedContent" value="export enum OrderStatus {&#10;  PENDING = 'pending',&#10;  PROCESSING = 'processing',&#10;  DELIVERING = 'delivering',&#10;  COMPLETED = 'completed',&#10;  CANCELLED = 'cancelled',&#10;  FAILED = 'failed'&#10;}&#10;&#10;export interface OrderItem {&#10;    product: Product;&#10;    quantity: number;&#10;}&#10;&#10;export interface Order {&#10;  id: number;&#10;  status: OrderStatus;&#10;  items: OrderItem[];&#10;  total: number;&#10;}&#10;&#10;export interface Product {&#10;    id: string;&#10;    name: string;&#10;    price: string;&#10;    image: string;&#10;}&#10;&#10;export interface CartItem {&#10;    id: string;&#10;    name: string;&#10;    price: number;&#10;    quantity: number;&#10;}&#10;&#10;export const getOrderStatusColor = (status: OrderStatus): string =&gt; {&#10;  switch (status) {&#10;    case OrderStatus.PENDING:&#10;      return 'info';&#10;    case OrderStatus.PROCESSING:&#10;      return 'warning';&#10;    case OrderStatus.DELIVERING:&#10;      return 'warning';&#10;    case OrderStatus.COMPLETED:&#10;      return 'success';&#10;    case OrderStatus.CANCELLED:&#10;    case OrderStatus.FAILED:&#10;      return 'error';&#10;    default:&#10;      return 'gray';&#10;  }&#10;};&#10;&#10;export const getOrderStatusMessage = (status: OrderStatus): string =&gt; {&#10;  switch (status) {&#10;    case OrderStatus.PENDING:&#10;      return 'New order created';&#10;    case OrderStatus.PROCESSING:&#10;      return 'Order is being processed';&#10;    case OrderStatus.DELIVERING:&#10;      return 'Order is being delivered';&#10;    case OrderStatus.COMPLETED:&#10;      return 'Order completed';&#10;    case OrderStatus.CANCELLED:&#10;      return 'Order cancelled';&#10;    case OrderStatus.FAILED:&#10;      return 'Order failed';&#10;    default:&#10;      return 'Order updated';&#10;  }&#10;};&#10;&#10;export const ORDER_STATUS_EVENTS = [&#10;  '.order.created',&#10;  '.order.processed',&#10;  '.order.delivered',&#10;  '.order.completed',&#10;  '.order.cancelled',&#10;  '.order.failed'&#10;];&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/order/app/Console/Commands/AMQPSetupCommand.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/order/app/Console/Commands/AMQPSetupCommand.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;namespace App\Console\Commands;&#10;&#10;use Jonston\AmqpLaravel\AMQPService;&#10;use Illuminate\Console\Command;&#10;&#10;class AMQPSetupCommand extends Command&#10;{&#10;    protected $signature = 'amqp:setup {--force : Force setup even in production}';&#10;    protected $description = 'Setup AMQP exchanges and queues';&#10;&#10;    public function handle(AMQPService $amqpService): int&#10;    {&#10;        try {&#10;            if (app()-&gt;environment('production') &amp;&amp; !$this-&gt;option('force')) {&#10;                $this-&gt;warn('Skipping queue setup in production. Use --force to override.');&#10;                return 0;&#10;            }&#10;&#10;            $this-&gt;info('Setting up AMQP infrastructure...');&#10;&#10;            $channel = $amqpService-&gt;getChannel();&#10;&#10;            $exchanges = config('amqp.exchanges', []);&#10;            $this-&gt;info(&quot;Creating &quot; . count($exchanges) . &quot; exchanges...&quot;);&#10;&#10;            foreach ($exchanges as $exchangeName =&gt; $exchangeConfig) {&#10;                try {&#10;                    $channel-&gt;exchange_declare(&#10;                        $exchangeName,&#10;                        $exchangeConfig['type'] ?? 'direct',&#10;                        $exchangeConfig['passive'] ?? false,&#10;                        $exchangeConfig['durable'] ?? true,&#10;                        $exchangeConfig['auto_delete'] ?? false,&#10;                        $exchangeConfig['internal'] ?? false,&#10;                        $exchangeConfig['nowait'] ?? false,&#10;                        $exchangeConfig['arguments'] ?? []&#10;                    );&#10;&#10;                    $this-&gt;line(&quot;  ✓ Exchange: {$exchangeName}&quot;);&#10;&#10;                } catch (\Exception $e) {&#10;                    $error = &quot;Failed to create exchange '{$exchangeName}': {$e-&gt;getMessage()}&quot;;&#10;                    $this-&gt;error(&quot;  ✗ {$error}&quot;);&#10;&#10;                    logger()-&gt;error('AMQP exchange creation failed', [&#10;                        'exchange' =&gt; $exchangeName,&#10;                        'config' =&gt; $exchangeConfig,&#10;                        'error' =&gt; $e-&gt;getMessage(),&#10;                        'trace' =&gt; $e-&gt;getTraceAsString()&#10;                    ]);&#10;&#10;                    return 1;&#10;                }&#10;            }&#10;&#10;            $queues = config('amqp.queues', []);&#10;            $this-&gt;info(&quot;Creating &quot; . count($queues) . &quot; queues...&quot;);&#10;&#10;            foreach ($queues as $queueName =&gt; $queueConfig) {&#10;                try {&#10;                    $channel-&gt;queue_declare(&#10;                        $queueName,&#10;                        $queueConfig['passive'] ?? false,&#10;                        $queueConfig['durable'] ?? true,&#10;                        $queueConfig['exclusive'] ?? false,&#10;                        $queueConfig['auto_delete'] ?? false,&#10;                        $queueConfig['nowait'] ?? false,&#10;                        $queueConfig['arguments'] ?? []&#10;                    );&#10;&#10;                    $this-&gt;line(&quot;  ✓ Queue: {$queueName}&quot;);&#10;&#10;                    if (!empty($queueConfig['exchange'])) {&#10;                        $channel-&gt;queue_bind(&#10;                            $queueName,&#10;                            $queueConfig['exchange'],&#10;                            $queueConfig['routing_key'] ?? ''&#10;                        );&#10;&#10;                        $this-&gt;line(&quot;    → Bound to: {$queueConfig['exchange']}&quot;);&#10;                    }&#10;&#10;                } catch (\Exception $e) {&#10;                    $error = &quot;Failed to create queue '{$queueName}': {$e-&gt;getMessage()}&quot;;&#10;                    $this-&gt;error(&quot;  ✗ {$error}&quot;);&#10;&#10;                    logger()-&gt;error('AMQP queue creation failed', [&#10;                        'queue' =&gt; $queueName,&#10;                        'config' =&gt; $queueConfig,&#10;                        'error' =&gt; $e-&gt;getMessage(),&#10;                        'trace' =&gt; $e-&gt;getTraceAsString()&#10;                    ]);&#10;&#10;                    return 1;&#10;                }&#10;            }&#10;&#10;            $successMessage = 'AMQP setup completed successfully';&#10;            $this-&gt;info(&quot;✅ {$successMessage}&quot;);&#10;&#10;            logger()-&gt;info('AMQP setup completed', [&#10;                'exchanges_count' =&gt; count($exchanges),&#10;                'queues_count' =&gt; count($queues)&#10;            ]);&#10;&#10;            return 0;&#10;&#10;        } catch (\Exception $e) {&#10;            $criticalError = &quot;Critical AMQP setup failure: {$e-&gt;getMessage()}&quot;;&#10;            $this-&gt;error(&quot;❌ {$criticalError}&quot;);&#10;&#10;            logger()-&gt;critical('AMQP setup critical failure', [&#10;                'error' =&gt; $e-&gt;getMessage(),&#10;                'file' =&gt; $e-&gt;getFile(),&#10;                'line' =&gt; $e-&gt;getLine(),&#10;                'trace' =&gt; $e-&gt;getTraceAsString()&#10;            ]);&#10;&#10;            if (app()-&gt;environment(['local', 'testing'])) {&#10;                $this-&gt;line('&lt;fg=red&gt;Stack trace:&lt;/&gt;');&#10;                $this-&gt;line($e-&gt;getTraceAsString());&#10;            }&#10;&#10;            return 1;&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;namespace App\Console\Commands;&#10;&#10;use Jonston\AmqpLaravel\AMQPService;&#10;use Illuminate\Console\Command;&#10;&#10;class AMQPSetupCommand extends Command&#10;{&#10;    protected $signature = 'amqp:setup {--force : Force setup even in production}';&#10;    protected $description = 'Setup AMQP exchanges and queues';&#10;&#10;    public function handle(AMQPService $amqpService): int&#10;    {&#10;        try {&#10;            if (app()-&gt;environment('production') &amp;&amp; !$this-&gt;option('force')) {&#10;                $this-&gt;warn('Skipping queue setup in production. Use --force to override.');&#10;                return 0;&#10;            }&#10;&#10;            $this-&gt;info('Setting up AMQP infrastructure...');&#10;&#10;            $exchanges = config('amqp.exchanges', []);&#10;            $queues = config('amqp.queues', []);&#10;            &#10;            $this-&gt;info(&quot;Creating &quot; . count($exchanges) . &quot; exchanges...&quot;);&#10;            $this-&gt;info(&quot;Creating &quot; . count($queues) . &quot; queues...&quot;);&#10;&#10;            $amqpService-&gt;setupFromConfig();&#10;&#10;            $successMessage = 'AMQP setup completed successfully';&#10;            $this-&gt;info(&quot;✅ {$successMessage}&quot;);&#10;&#10;            logger()-&gt;info('AMQP setup completed', [&#10;                'exchanges_count' =&gt; count($exchanges),&#10;                'queues_count' =&gt; count($queues)&#10;            ]);&#10;&#10;            return 0;&#10;&#10;        } catch (\Exception $e) {&#10;            $criticalError = &quot;Critical AMQP setup failure: {$e-&gt;getMessage()}&quot;;&#10;            $this-&gt;error(&quot;❌ {$criticalError}&quot;);&#10;&#10;            logger()-&gt;critical('AMQP setup critical failure', [&#10;                'error' =&gt; $e-&gt;getMessage(),&#10;                'file' =&gt; $e-&gt;getFile(),&#10;                'line' =&gt; $e-&gt;getLine(),&#10;                'trace' =&gt; $e-&gt;getTraceAsString()&#10;            ]);&#10;&#10;            if (app()-&gt;environment(['local', 'testing'])) {&#10;                $this-&gt;line('&lt;fg=red&gt;Stack trace:&lt;/&gt;');&#10;                $this-&gt;line($e-&gt;getTraceAsString());&#10;            }&#10;&#10;            return 1;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/supervisor/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/supervisor/Dockerfile" />
              <option name="originalContent" value="# supervisor/Dockerfile&#10;FROM debian:bullseye-slim&#10;&#10;RUN apt-get update &amp;&amp; apt-get install -y \&#10;    supervisor \&#10;    &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;RUN mkdir -p /var/log/supervisor&#10;&#10;COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf&#10;COPY laravel-workers.conf /etc/supervisor/conf.d/laravel-workers.conf&#10;&#10;CMD [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]" />
              <option name="updatedContent" value="# supervisor/Dockerfile&#10;FROM debian:bullseye-slim&#10;&#10;RUN apt-get update &amp;&amp; apt-get install -y \&#10;    supervisor \&#10;    &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;RUN mkdir -p /var/log/supervisor&#10;&#10;COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf&#10;COPY laravel-workers.conf /etc/supervisor/conf.d/laravel-workers.conf&#10;&#10;CMD [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>