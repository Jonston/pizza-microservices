<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/client/app/components/OrderList.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/app/components/OrderList.vue" />
              <option name="originalContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;const orderStore = useOrderStore();&#10;&#10;// Маппинг статусов на цвета с использованием Tailwind классов&#10;const getStatusColor = (status: string) =&gt; {&#10;  switch (status.toLowerCase()) {&#10;    case 'pending':&#10;      return 'info';&#10;    case 'processing':&#10;      return 'warning';&#10;    case 'delivering':&#10;      return 'warning';&#10;    case 'completed':&#10;      return 'success';&#10;    case 'cancelled':&#10;      return 'error';&#10;    case 'failed':&#10;      return 'error';&#10;    default:&#10;      return 'gray';&#10;  }&#10;};&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;  &lt;div class=&quot;order-list p-4 bg-white rounded-lg shadow-md&quot;&gt;&#10;    &lt;h2 class=&quot;text-xl font-semibold mb-4&quot;&gt;Your Orders&lt;/h2&gt;&#10;    &lt;div v-if=&quot;orderStore.orders.length &gt; 0&quot;&gt;&#10;      &lt;div v-for=&quot;order in orderStore.orders&quot; :key=&quot;order.id&quot; class=&quot;mb-3 p-3 border border-gray-200 rounded&quot;&gt;&#10;        &lt;div class=&quot;flex justify-between&quot;&gt;&#10;          &lt;span class=&quot;font-medium&quot;&gt;Order #{{ order.id }}&lt;/span&gt;&#10;          &lt;UBadge&#10;            :color=&quot;getStatusColor(order.status)&quot;&#10;            variant=&quot;subtle&quot;&#10;            size=&quot;lg&quot;&#10;          &gt;&#10;            {{ order.status }}&#10;          &lt;/UBadge&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;text-sm text-gray-600 mt-1&quot;&gt;&#10;          &lt;div&gt;Items: {{ order.items.join(', ') }}&lt;/div&gt;&#10;          &lt;div class=&quot;font-medium mt-1&quot;&gt;Total: ₽{{ order.total }}&lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div v-else class=&quot;text-gray-500 text-center py-4&quot;&gt;&#10;      No orders yet&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style scoped&gt;&#10;.order-list {&#10;  min-height: 300px;&#10;  width: 100%;&#10;}&#10;&lt;/style&gt;" />
              <option name="updatedContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { useOrderStore } from '../stores/order';&#10;import { OrderStatus } from '~/types/common';&#10;&#10;const orderStore = useOrderStore();&#10;&#10;// Маппинг статусов на цвета с использованием enum&#10;const getStatusColor = (status: OrderStatus) =&gt; {&#10;  switch (status) {&#10;    case OrderStatus.PENDING:&#10;      return 'info';&#10;    case OrderStatus.PROCESSING:&#10;      return 'warning';&#10;    case OrderStatus.DELIVERING:&#10;      return 'warning';&#10;    case OrderStatus.COMPLETED:&#10;      return 'success';&#10;    case OrderStatus.CANCELLED:&#10;      return 'error';&#10;    case OrderStatus.FAILED:&#10;      return 'error';&#10;    default:&#10;      return 'gray';&#10;  }&#10;};&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;  &lt;div class=&quot;order-list p-4 bg-white rounded-lg shadow-md&quot;&gt;&#10;    &lt;h2 class=&quot;text-xl font-semibold mb-4&quot;&gt;Your Orders&lt;/h2&gt;&#10;    &lt;div v-if=&quot;orderStore.orders.length &gt; 0&quot;&gt;&#10;      &lt;div v-for=&quot;order in orderStore.orders&quot; :key=&quot;order.id&quot; class=&quot;mb-3 p-3 border border-gray-200 rounded&quot;&gt;&#10;        &lt;div class=&quot;flex justify-between&quot;&gt;&#10;          &lt;span class=&quot;font-medium&quot;&gt;Order #{{ order.id }}&lt;/span&gt;&#10;          &lt;UBadge&#10;            :color=&quot;getStatusColor(order.status)&quot;&#10;            variant=&quot;subtle&quot;&#10;            size=&quot;lg&quot;&#10;          &gt;&#10;            {{ order.status }}&#10;          &lt;/UBadge&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;text-sm text-gray-600 mt-1&quot;&gt;&#10;          &lt;div&gt;Items: {{ order.items.join(', ') }}&lt;/div&gt;&#10;          &lt;div class=&quot;font-medium mt-1&quot;&gt;Total: ₽{{ order.total }}&lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div v-else class=&quot;text-gray-500 text-center py-4&quot;&gt;&#10;      No orders yet&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style scoped&gt;&#10;.order-list {&#10;  min-height: 300px;&#10;  width: 100%;&#10;}&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/app/components/ProductCard.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/app/components/ProductCard.vue" />
              <option name="originalContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { useCartStore } from '../stores/cart';&#10;import { computed } from 'vue';&#10;&#10;defineProps&lt;{&#10;  image: string;&#10;  name: string;&#10;  id: number;&#10;  price: number;&#10;}&gt;();&#10;&#10;const emit = defineEmits(['order']);&#10;&#10;const cartStore = useCartStore();&#10;&#10;// Проверяем количество данного товара в корзине&#10;const itemInCart = computed(() =&gt; {&#10;  return cartStore.items.find(item =&gt; item.id === props.id);&#10;});&#10;&#10;const isMaxQuantity = computed(() =&gt; {&#10;  return itemInCart.value &amp;&amp; itemInCart.value.quantity &gt;= 10;&#10;});&#10;&#10;function orderProduct() {&#10;  if (!isMaxQuantity.value) {&#10;    emit('order');&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;  &lt;UCard&#10;      class=&quot;w-[300px] shadow-md&quot;&#10;      :ui=&quot;{ header: 'p-0 sm:p-0' }&quot;&#10;  &gt;&#10;    &lt;template #header&gt;&#10;      &lt;img :src=&quot;image&quot; :alt=&quot;name&quot; class=&quot;w-full h-[200px] object-cover&quot; /&gt;&#10;    &lt;/template&gt;&#10;    &lt;div class=&quot;flex flex-col items-center gap-2 pt-0&quot;&gt;&#10;      &lt;h3 class=&quot;text-xl font-semibold text-gray-700 text-center m-0&quot;&gt;{{ name }}&lt;/h3&gt;&#10;      &lt;p class=&quot;text-lg font-semibold text-gray-700 m-0&quot;&gt;{{ price }} &amp;#8372;&lt;/p&gt;&#10;      &lt;UButton&#10;          size=&quot;lg&quot;&#10;          class=&quot;uppercase&quot;&#10;          color=&quot;secondary&quot;&#10;          :disabled=&quot;isMaxQuantity&quot;&#10;          @click=&quot;orderProduct&quot;&#10;      &gt;Order&lt;/UButton&gt;&#10;    &lt;/div&gt;&#10;  &lt;/UCard&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style scoped&gt;&#10;/* All styles replaced with Tailwind utility classes */&#10;&lt;/style&gt;" />
              <option name="updatedContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { useCartStore } from '../stores/cart';&#10;import { computed } from 'vue';&#10;&#10;const props = defineProps&lt;{&#10;  image: string;&#10;  name: string;&#10;  id: number;&#10;  price: number;&#10;}&gt;();&#10;&#10;const emit = defineEmits(['order']);&#10;&#10;const cartStore = useCartStore();&#10;&#10;// Проверяем количество данного товара в корзине&#10;const itemInCart = computed(() =&gt; {&#10;  return cartStore.items.find(item =&gt; item.id === props.id);&#10;});&#10;&#10;const isMaxQuantity = computed(() =&gt; {&#10;  return itemInCart.value &amp;&amp; itemInCart.value.quantity &gt;= 10;&#10;});&#10;&#10;function orderProduct() {&#10;  emit('order');&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;  &lt;UCard&#10;      class=&quot;w-[300px] shadow-md&quot;&#10;      :ui=&quot;{ header: 'p-0 sm:p-0' }&quot;&#10;  &gt;&#10;    &lt;template #header&gt;&#10;      &lt;img :src=&quot;image&quot; :alt=&quot;name&quot; class=&quot;w-full h-[200px] object-cover&quot; /&gt;&#10;    &lt;/template&gt;&#10;    &lt;div class=&quot;flex flex-col items-center gap-2 pt-0&quot;&gt;&#10;      &lt;h3 class=&quot;text-xl font-semibold text-gray-700 text-center m-0&quot;&gt;{{ name }}&lt;/h3&gt;&#10;      &lt;p class=&quot;text-lg font-semibold text-gray-700 m-0&quot;&gt;{{ price }} &amp;#8372;&lt;/p&gt;&#10;      &lt;UButton&#10;          size=&quot;lg&quot;&#10;          class=&quot;uppercase&quot;&#10;          color=&quot;secondary&quot;&#10;          :disabled=&quot;isMaxQuantity&quot;&#10;          @click=&quot;orderProduct&quot;&#10;      &gt;Order&lt;/UButton&gt;&#10;    &lt;/div&gt;&#10;  &lt;/UCard&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style scoped&gt;&#10;/* All styles replaced with Tailwind utility classes */&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/app/stores/cart.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/app/stores/cart.ts" />
              <option name="originalContent" value="import { defineStore } from 'pinia';&#10;import { ref, computed } from 'vue';&#10;&#10;interface CartItem {&#10;  id: number;&#10;  name: string;&#10;  price: number;&#10;  quantity: number;&#10;}&#10;&#10;export const useCartStore = defineStore('cart', () =&gt; {&#10;  const items = ref&lt;CartItem[]&gt;([&#10;    { id: 1, name: 'Margherita Pizza', price: 250, quantity: 1 },&#10;    { id: 3, name: 'Four Cheese Pizza', price: 300, quantity: 2 }&#10;  ]);&#10;&#10;  const totalPrice = computed(() =&gt; {&#10;    return items.value.reduce((total, item) =&gt; total + (item.price * item.quantity), 0);&#10;  });&#10;  &#10;  const itemCount = computed(() =&gt; {&#10;    return items.value.length;&#10;  });&#10;&#10;  function addItem(item: CartItem) {&#10;    const existingItem = items.value.find(i =&gt; i.id === item.id);&#10;&#10;    if (existingItem) {&#10;      if (existingItem.quantity &gt;= 10) {&#10;        return;&#10;      }&#10;      existingItem.quantity = Math.min(existingItem.quantity + 1, 10);&#10;    } else {&#10;      items.value.push({ ...item, quantity: 1 });&#10;    }&#10;  }&#10;  &#10;  function removeItem(itemId: number) {&#10;    items.value = items.value.filter(item =&gt; item.id !== itemId);&#10;  }&#10;  &#10;  function increaseQuantity(itemId: number) {&#10;    const item = items.value.find(i =&gt; i.id === itemId);&#10;    if (item &amp;&amp; item.quantity &lt; 10) {&#10;      item.quantity += 1;&#10;    }&#10;  }&#10;  &#10;  function decreaseQuantity(itemId: number) {&#10;    const item = items.value.find(i =&gt; i.id === itemId);&#10;    if (item &amp;&amp; item.quantity &gt; 1) {&#10;      item.quantity -= 1;&#10;    }&#10;  }&#10;  &#10;  function clearCart() {&#10;    items.value = [];&#10;  }&#10;  &#10;  return {&#10;    items,&#10;    totalPrice,&#10;    itemCount,&#10;    addItem,&#10;    removeItem,&#10;    increaseQuantity,&#10;    decreaseQuantity,&#10;    clearCart&#10;  };&#10;});" />
              <option name="updatedContent" value="import { defineStore } from 'pinia';&#10;import { ref, computed } from 'vue';&#10;&#10;interface CartItem {&#10;  id: number;&#10;  name: string;&#10;  price: number;&#10;  quantity: number;&#10;}&#10;&#10;export const useCartStore = defineStore('cart', () =&gt; {&#10;  const items = ref&lt;CartItem[]&gt;([&#10;    { id: 1, name: 'Margherita Pizza', price: 250, quantity: 1 },&#10;    { id: 3, name: 'Four Cheese Pizza', price: 300, quantity: 2 }&#10;  ]);&#10;&#10;  const totalPrice = computed(() =&gt; {&#10;    return items.value.reduce((total, item) =&gt; total + (item.price * item.quantity), 0);&#10;  });&#10;  &#10;  const itemCount = computed(() =&gt; {&#10;    return items.value.length;&#10;  });&#10;&#10;  function addItem(item: CartItem) {&#10;    const existingItem = items.value.find(i =&gt; i.id === item.id);&#10;&#10;    if (existingItem) {&#10;      if (existingItem.quantity &gt;= 10) {&#10;        return;&#10;      }&#10;      existingItem.quantity = Math.min(existingItem.quantity + 1, 10);&#10;    } else {&#10;      items.value.push({ ...item, quantity: 1 });&#10;    }&#10;  }&#10;  &#10;  function removeItem(itemId: number) {&#10;    items.value = items.value.filter(item =&gt; item.id !== itemId);&#10;  }&#10;  &#10;  function increaseQuantity(itemId: number) {&#10;    const item = items.value.find(i =&gt; i.id === itemId);&#10;    if (item &amp;&amp; item.quantity &lt; 10) {&#10;      item.quantity += 1;&#10;    }&#10;  }&#10;  &#10;  function decreaseQuantity(itemId: number) {&#10;    const item = items.value.find(i =&gt; i.id === itemId);&#10;    if (item &amp;&amp; item.quantity &gt; 1) {&#10;      item.quantity -= 1;&#10;    }&#10;  }&#10;  &#10;  function clearCart() {&#10;    items.value = [];&#10;  }&#10;  &#10;  return {&#10;    items,&#10;    totalPrice,&#10;    itemCount,&#10;    addItem,&#10;    removeItem,&#10;    increaseQuantity,&#10;    decreaseQuantity,&#10;    clearCart&#10;  };&#10;});&#10;&#10;if (import.meta.hot) {&#10;  import.meta.hot.accept(acceptHMRUpdate(useCartStore, import.meta.hot))&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/app/stores/order.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/app/stores/order.ts" />
              <option name="originalContent" value="import { defineStore, acceptHMRUpdate } from 'pinia';&#10;import { ref, computed } from 'vue';&#10;import { OrderStatus } from '~/types/common';&#10;&#10;interface Order {&#10;  id: number;&#10;  status: OrderStatus;&#10;  items: string[];&#10;  total: number;&#10;}&#10;&#10;export const useOrderStore = defineStore('order', () =&gt; {&#10;  const orders = ref&lt;Order[]&gt;([&#10;    { id: 1, status: OrderStatus.PENDING, items: ['Margherita Pizza'], total: 250 },&#10;    { id: 2, status: OrderStatus.PROCESSING, items: ['Pepperoni Pizza'], total: 280 },&#10;    { id: 3, status: OrderStatus.DELIVERING, items: ['Four Cheese Pizza'], total: 300 },&#10;    { id: 4, status: OrderStatus.COMPLETED, items: ['Margherita Pizza', 'Pepperoni Pizza'], total: 530 },&#10;    { id: 5, status: OrderStatus.CANCELLED, items: ['Four Cheese Pizza'], total: 300 },&#10;    { id: 6, status: OrderStatus.FAILED, items: ['Pepperoni Pizza'], total: 280 }&#10;  ]);&#10;  &#10;  // Getters&#10;  const orderCount = computed(() =&gt; {&#10;    return orders.value.length;&#10;  });&#10;  &#10;  const getOrderById = (orderId: number) =&gt; {&#10;    return orders.value.find(order =&gt; order.id === orderId);&#10;  };&#10;  &#10;  // Actions&#10;  function addOrder(order: Omit&lt;Order, 'id'&gt;) {&#10;    // Generate a new ID (in a real app, this would come from the backend)&#10;    const newId = orders.value.length &gt; 0 &#10;      ? Math.max(...orders.value.map(o =&gt; o.id)) + 1 &#10;      : 1;&#10;    &#10;    // Add the new order with the generated ID&#10;    orders.value.push({&#10;      id: newId,&#10;      ...order&#10;    });&#10;    &#10;    return newId;&#10;  }&#10;  &#10;  function updateOrderStatus(orderId: number, status: OrderStatus) {&#10;    const order = orders.value.find(o =&gt; o.id === orderId);&#10;    if (order) {&#10;      order.status = status;&#10;    }&#10;  }&#10;  &#10;  function removeOrder(orderId: number) {&#10;    orders.value = orders.value.filter(order =&gt; order.id !== orderId);&#10;  }&#10;  &#10;  return {&#10;    orders,&#10;    orderCount,&#10;    getOrderById,&#10;    addOrder,&#10;    updateOrderStatus,&#10;    removeOrder&#10;  };&#10;});&#10;&#10;if (import.meta.hot) {&#10;  import.meta.hot.accept(acceptHMRUpdate(useOrderStore, import.meta.hot))&#10;}&#10;" />
              <option name="updatedContent" value="import { defineStore, acceptHMRUpdate } from 'pinia';&#10;import { ref, computed } from 'vue';&#10;import { OrderStatus, Order } from '~/types/common';&#10;&#10;export const useOrderStore = defineStore('order', () =&gt; {&#10;  const orders = ref&lt;Order[]&gt;([&#10;    { id: 1, status: OrderStatus.PENDING, items: ['Margherita Pizza'], total: 250 },&#10;    { id: 2, status: OrderStatus.PROCESSING, items: ['Pepperoni Pizza'], total: 280 },&#10;    { id: 3, status: OrderStatus.DELIVERING, items: ['Four Cheese Pizza'], total: 300 },&#10;    { id: 4, status: OrderStatus.COMPLETED, items: ['Margherita Pizza', 'Pepperoni Pizza'], total: 530 },&#10;    { id: 5, status: OrderStatus.CANCELLED, items: ['Four Cheese Pizza'], total: 300 },&#10;    { id: 6, status: OrderStatus.FAILED, items: ['Pepperoni Pizza'], total: 280 }&#10;  ]);&#10;  &#10;  // Getters&#10;  const orderCount = computed(() =&gt; {&#10;    return orders.value.length;&#10;  });&#10;  &#10;  const getOrderById = (orderId: number) =&gt; {&#10;    return orders.value.find(order =&gt; order.id === orderId);&#10;  };&#10;  &#10;  // Actions&#10;  function addOrder(order: Omit&lt;Order, 'id'&gt;) {&#10;    // Generate a new ID (in a real app, this would come from the backend)&#10;    const newId = orders.value.length &gt; 0 &#10;      ? Math.max(...orders.value.map(o =&gt; o.id)) + 1 &#10;      : 1;&#10;    &#10;    // Add the new order with the generated ID&#10;    orders.value.push({&#10;      id: newId,&#10;      ...order&#10;    });&#10;    &#10;    return newId;&#10;  }&#10;  &#10;  function updateOrderStatus(orderId: number, status: OrderStatus) {&#10;    const order = orders.value.find(o =&gt; o.id === orderId);&#10;    if (order) {&#10;      order.status = status;&#10;    }&#10;  }&#10;  &#10;  function removeOrder(orderId: number) {&#10;    orders.value = orders.value.filter(order =&gt; order.id !== orderId);&#10;  }&#10;  &#10;  return {&#10;    orders,&#10;    orderCount,&#10;    getOrderById,&#10;    addOrder,&#10;    updateOrderStatus,&#10;    removeOrder&#10;  };&#10;});&#10;&#10;if (import.meta.hot) {&#10;  import.meta.hot.accept(acceptHMRUpdate(useOrderStore, import.meta.hot))&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/app/types/common.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/app/types/common.ts" />
              <option name="originalContent" value="export enum OrderStatus {&#10;  PENDING = 'pending',&#10;  PROCESSING = 'processing',&#10;  DELIVERING = 'delivering',&#10;  COMPLETED = 'completed',&#10;  CANCELLED = 'cancelled',&#10;  FAILED = 'failed'&#10;}&#10;&#10;" />
              <option name="updatedContent" value="export enum OrderStatus {&#10;  PENDING = 'pending',&#10;  PROCESSING = 'processing',&#10;  DELIVERING = 'delivering',&#10;  COMPLETED = 'completed',&#10;  CANCELLED = 'cancelled',&#10;  FAILED = 'failed'&#10;}&#10;&#10;export interface Order {&#10;  id: number;&#10;  status: OrderStatus;&#10;  items: string[];&#10;  total: number;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/order/app/Console/Commands/ProductCreatedConsumer.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/order/app/Console/Commands/ProductCreatedConsumer.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;namespace App\Console\Commands;&#10;&#10;use App\Services\ProductService;&#10;use Bschmitt\Amqp\Facades\Amqp;&#10;use Illuminate\Console\Command;&#10;&#10;class ProductCreatedConsumer extends Command&#10;{&#10;    protected ProductService $productService;&#10;&#10;    protected $signature = 'rabbit:consume';&#10;&#10;    protected $description = 'Command description';&#10;&#10;    public function __construct(ProductService $productService)&#10;    {&#10;        parent::__construct();&#10;&#10;        $this-&gt;productService = $productService;&#10;    }&#10;&#10;    public function handle(): void&#10;    {&#10;        $this-&gt;info('ProductCreatedConsumer is running...');&#10;&#10;        $data = [&#10;            // ...заполните данными для публикации...&#10;        ];&#10;&#10;        $params = [&#10;            'exchange' =&gt; 'product_fanout',&#10;            'exchange_type' =&gt; 'fanout',&#10;        ];&#10;&#10;        Amqp::publish('', $data, $params);&#10;&#10;        $this-&gt;info('ProductCreatedConsumer finished.');&#10;    }&#10;&#10;    private function processMessage($message, $resolver): void&#10;    {&#10;        dump($message-&gt;body);&#10;&#10;        try {&#10;            $this-&gt;info(&quot;start processing message at &quot; . now());&#10;&#10;            $data = json_decode($message-&gt;body, true);&#10;&#10;            $this-&gt;productService-&gt;create($data);&#10;&#10;            $resolver-&gt;acknowledge($message);&#10;&#10;            $this-&gt;info(&quot;✅ Message processed successfully&quot;);&#10;&#10;        } catch (\Exception $e) {&#10;            $this-&gt;error(&quot;❌ Error processing message: &quot; . $e-&gt;getMessage());&#10;&#10;            $resolver-&gt;reject($message, false);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;namespace App\Console\Commands;&#10;&#10;use App\Services\ProductService;&#10;use Bschmitt\Amqp\Facades\Amqp;&#10;use Illuminate\Console\Command;&#10;&#10;class ProductCreatedConsumer extends Command&#10;{&#10;    protected ProductService $productService;&#10;&#10;    protected $signature = 'rabbit:consume';&#10;&#10;    protected $description = 'Consume product_created queue and copy product';&#10;&#10;    public function __construct(ProductService $productService)&#10;    {&#10;        parent::__construct();&#10;&#10;        $this-&gt;productService = $productService;&#10;    }&#10;&#10;    public function handle(): void&#10;    {&#10;        $this-&gt;info('ProductCreatedConsumer is running...');&#10;&#10;        Amqp::consume('product_created', function ($message, $resolver) {&#10;            $this-&gt;processMessage($message, $resolver);&#10;        });&#10;&#10;        $this-&gt;info('ProductCreatedConsumer finished.');&#10;    }&#10;&#10;    private function processMessage($message, $resolver): void&#10;    {&#10;        dump($message-&gt;body);&#10;&#10;        try {&#10;            $this-&gt;info(&quot;start processing message at &quot; . now());&#10;&#10;            $data = json_decode($message-&gt;body, true);&#10;&#10;            // Копирование товара&#10;            $this-&gt;productService-&gt;copy($data);&#10;&#10;            $resolver-&gt;acknowledge($message);&#10;&#10;            $this-&gt;info(&quot;✅ Message processed successfully&quot;);&#10;&#10;        } catch (\Exception $e) {&#10;            $this-&gt;error(&quot;❌ Error processing message: &quot; . $e-&gt;getMessage());&#10;&#10;            $resolver-&gt;reject($message, false);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/supervisor/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/supervisor/Dockerfile" />
              <option name="originalContent" value="# supervisor/Dockerfile&#10;FROM debian:bullseye-slim&#10;&#10;RUN apt-get update &amp;&amp; apt-get install -y \&#10;    supervisor \&#10;    &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;RUN mkdir -p /var/log/supervisor&#10;&#10;COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf&#10;COPY laravel-workers.conf /etc/supervisor/conf.d/laravel-workers.conf&#10;&#10;CMD [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]" />
              <option name="updatedContent" value="# supervisor/Dockerfile&#10;FROM debian:bullseye-slim&#10;&#10;RUN apt-get update &amp;&amp; apt-get install -y \&#10;    supervisor \&#10;    &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;RUN mkdir -p /var/log/supervisor&#10;&#10;COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf&#10;COPY laravel-workers.conf /etc/supervisor/conf.d/laravel-workers.conf&#10;&#10;CMD [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisor/supervisord.conf&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>